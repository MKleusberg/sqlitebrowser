#line 2 "sqlite3_lexer.cpp"

#line 4 "sqlite3_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 119
#define YY_END_OF_BUFFER 120
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[444] =
    {   0,
        0,    0,  120,  118,    1,    2,    2,  118,  118,  105,
      104,  118,   94,   95,  101,   99,   97,  100,   96,  102,
       90,   90,  118,   98,  112,  108,  110,   92,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      118,  118,  106,  103,  118,  118,  118,    1,    2,  114,
        0,   88,    0,   89,    3,   90,    4,   90,   90,    0,
        0,   93,  116,  113,  115,  109,  111,  117,   92,   85,
       85,   85,   85,    8,   85,    0,    0,    0,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   39,   85,   85,   42,   46,   85,
       85,   85,   51,   85,   55,   56,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,    0,    0,   87,    0,   86,  107,   85,
        0,    0,   90,    0,   90,   90,   92,   85,   85,    7,
        9,   85,    0,    0,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   30,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   48,   85,   85,   52,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   71,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,    0,    0,   85,   85,   85,    0,   85,   85,   13,
       14,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       27,   85,   29,   85,   85,   33,   85,   85,   85,   85,
       38,   85,   85,   85,   85,   85,   85,   49,   85,   85,
       54,   57,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   69,   85,   85,   73,   75,   76,   85,
       85,   85,   85,   85,   82,   85,   85,   91,    5,   85,
       85,   85,   85,   15,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   34,   85,   85,   85,   85,

       85,   43,   85,   85,   85,   50,   85,   85,   85,   85,
       61,   62,   85,   85,   85,   85,   85,   68,   85,   72,
       85,   85,   85,   85,   80,   85,   83,   85,    6,   85,
       85,   85,   85,   85,   85,   19,   85,   85,   85,   26,
       85,   31,   32,   35,   85,   85,   40,   85,   85,   45,
       47,   85,   85,   85,   85,   85,   64,   85,   85,   85,
       70,   85,   85,   78,   79,   85,   85,   85,   11,   12,
       16,   85,   85,   85,   23,   85,   85,   85,   85,   37,
       85,   85,   53,   85,   85,   60,   85,   65,   85,   85,
       85,   85,   81,   84,   85,   17,   85,   85,   85,   25,

       28,   85,   85,   85,   85,   85,   85,   66,   67,   85,
       85,   85,   85,   85,   85,   85,   36,   41,   44,   58,
       59,   85,   74,   77,   85,   18,   85,   85,   24,   63,
       85,   85,   85,   85,   20,   21,   10,   85,   85,   85,
       85,   22,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   20,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   35,
       51,    1,   52,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   35,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   35,    1,   79,    1,   80,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    6,    1,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    6,    6,    6
    } ;

static const flex_int16_t yy_base[452] =
    {   0,
        0,    0,  343, 2240,  317,   82,   84,  295,  306, 2240,
     2240,  286, 2240, 2240, 2240, 2240, 2240,  279,   71,  277,
       75,   79,    0, 2240,   77,  265,   79,  260,  126,   62,
      185,   74,  122,   80,   85,   28,  239,   96,  113,  159,
      180,  190,  232,  162,  225,  287,  257,  140,  294,  168,
      224,  206,  170, 2240,  158,  151,  146,  217,  112, 2240,
      210,  201,  192,  175, 2240,  272, 2240,  274,  329,  110,
        0,    0, 2240, 2240, 2240, 2240, 2240, 2240,   99,   48,
      198,  252,  303,  309,  299,  100,   94,   92,  317,  323,
      320,  357,  330,  337,  386,  353,  366,  389,  370,  152,

      392,  378,  422,  270,   57,  417,  425,  452,  444,  435,
      456,  449,  469,  465,  281,  291,  482,  473,  491,  524,
      528,  533,  540,  563,  548,  566,  553,  599,  605,  558,
      500,  608,  611,    0,  108, 2240,   97,   95, 2240,  349,
       61,   55,  639,  172,  194,    0,  267,  625,  617,  395,
      406,  634,   46,   38,  519,  675,  647,  641,  682,  685,
      667,  715,  697,  705,  702,  723,  496,  689,  711,  726,
      732,  745,  755,  766,  774,  763,  781,  792,  787,  796,
      807,  570,  803,  784,  815,  835,  830,  838,  849,  857,
      844,  653,  866,  875,  870,  863,  878,  921,  907,  577,

      914,  903,  925,  940,  933,  936,  945,  928,  957,  982,
      993,  104,   26,  986,  974,  998,   15, 1003, 1008,  582,
      588, 1014, 1017, 1023, 1029, 1044, 1049, 1063, 1052, 1069,
      752, 1076,  760, 1079, 1084,  810, 1091, 1095, 1101, 1109,
      820, 1127, 1136, 1122, 1152, 1145, 1158,  892, 1163, 1175,
      898,  953, 1168, 1171, 1182, 1202, 1208, 1205, 1195, 1213,
     1227, 1244, 1254,  962, 1247, 1263, 1233, 1098, 1130, 1259,
     1274, 1278, 1271, 1289, 1198, 1309, 1312, 2240, 1224, 1282,
     1320, 1339, 1347, 1295, 1336, 1350, 1343, 1353, 1361, 1373,
     1368, 1358, 1407, 1394, 1403, 1324, 1411, 1416, 1427, 1437,

     1434, 1378, 1446, 1458, 1442, 1387, 1467, 1461, 1454, 1484,
     1431, 1464, 1493, 1512, 1505, 1501, 1531, 1476, 1509, 1487,
     1535, 1540, 1543, 1550, 1515, 1546, 1521, 1562, 1528, 1592,
     1596, 1601, 1607, 1610, 1613, 1558, 1625, 1628, 1622, 1571,
     1631, 1574, 1634, 1637, 1665, 1683, 1641, 1674, 1689, 1648,
     1651, 1699, 1705, 1711, 1677, 1702, 1660, 1716, 1723, 1734,
     1694, 1737, 1750, 1719, 1727, 1759, 1767, 1754, 1731, 1744,
     1747, 1790, 1805, 1770, 1762, 1820, 1826, 1812, 1823, 1776,
     1838, 1832, 1782, 1851, 1859, 1795, 1871, 1798, 1856, 1881,
     1875, 1841, 1848, 1865, 1897, 1868, 1905, 1932, 1929, 1885,

     1891, 1938, 1941, 1926, 1952, 1946, 1967, 1900, 1919, 1977,
     1988, 1999, 1993, 2007, 2010, 2015, 1957, 1970, 1974, 1985,
     1996, 2040, 2003, 2018, 2058, 2021, 2061, 2069, 2026, 2031,
     2072, 2066, 2088, 2084, 2037, 2092, 2044, 2113, 2105, 2095,
     2121, 2098, 2240, 2205, 2211, 2214, 2217, 2223, 2229, 2233,
     2235
    } ;

static const flex_int16_t yy_def[452] =
    {   0,
      443,    1,  443,  443,  443,  443,  443,  443,  444,  443,
      443,  445,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  446,  443,  443,  443,  443,  443,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      448,  449,  443,  443,  443,  443,  443,  443,  443,  443,
      444,  443,  445,  443,  443,  443,  443,  443,  443,  443,
      450,  446,  443,  443,  443,  443,  443,  443,  443,  447,
      447,  447,  447,  447,  447,  443,  443,  443,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  451,  448,  443,  449,  443,  443,  447,
      443,  443,  443,  443,  443,  450,  443,  447,  447,  447,
      447,  447,  443,  443,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  451,  443,  447,  447,  447,  443,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  443,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,    0,  443,  443,  443,  443,  443,  443,  443,
      443
    } ;

static const flex_int16_t yy_nxt[2325] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   36,   38,   39,   40,   41,   42,
       43,   36,   44,   45,   46,   47,   48,   49,   50,   36,
       51,    4,   36,   52,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   36,
       44,   45,   46,   47,   48,   49,   50,   36,   53,   54,
        4,   55,   56,   57,   59,   59,   59,   59,   66,   66,
       68,   89,   69,   69,   68,   80,   69,   69,   73,   74,

       75,   77,   78,   95,   70,  101,  140,   96,   70,   86,
       87,   88,  278,  102,   59,   59,  147,  147,  217,  103,
       89,  104,  144,   71,  144,  110,   80,  145,  145,   86,
       87,   88,   95,   70,  101,  213,   96,   70,   86,   87,
       88,  140,  102,   86,   87,   88,  111,  103,  137,  104,
      138,   71,   81,   82,  110,   86,   87,   88,   97,  136,
       98,   86,   87,   88,   83,   99,   86,   87,   88,   84,
      100,   85,  154,  131,  153,  111,  134,   86,   87,   88,
       80,   81,   82,   63,  112,  169,   97,  120,   98,  145,
      145,  121,   83,   99,   86,   87,   88,   84,  100,   85,

       64,  122,  131,   86,   87,   88,   61,   86,   87,   88,
       90,  145,  145,  112,  169,   62,  120,   91,   58,  113,
      121,   86,   87,   88,   92,  114,  142,   93,  115,  122,
       94,  141,  116,   86,   87,   88,  117,  148,  140,   90,
       86,   87,   88,   86,   87,   88,   91,  113,  139,   86,
       87,   88,   92,  114,  123,   93,  115,  118,   94,  138,
      116,   86,   87,   88,  117,  148,   86,   87,   88,  105,
      106,   86,   87,   88,  119,  136,  107,  108,   79,   86,
       87,   88,  109,  123,  147,  147,  118,   76,   67,   66,
       66,  143,  143,   65,   64,  128,  149,  129,  105,  106,

      130,   70,  119,   70,  107,  108,   86,   87,   88,  175,
      109,   62,  124,   86,   87,   88,  125,   60,   58,  126,
       86,   87,   88,  128,  149,  129,  132,  133,  130,  127,
       70,  150,   70,   86,   87,   88,  151,  175,   86,   87,
       88,  124,  443,  152,   68,  125,   69,   69,  126,  157,
      443,   86,   87,   88,  443,  132,  133,  127,   70,  160,
      150,  155,   86,   87,   88,  151,  156,  443,   86,   87,
       88,  152,   86,   87,   88,   86,   87,   88,  157,  161,
       86,   87,   88,  443,   86,   87,   88,   70,  160,  155,
       86,   87,   88,  158,  156,  159,  165,  168,   86,   87,

       88,   86,   87,   88,   86,   87,   88,  161,  443,  166,
      443,   86,   87,   88,  172,  443,  162,  167,   86,   87,
       88,  158,  163,  159,  165,  170,  168,  443,  171,  164,
       86,   87,   88,  443,   86,   87,   88,  166,   86,   87,
       88,  443,  172,  443,  443,  162,  167,   86,   87,   88,
      163,   86,   87,   88,  170,  176,  171,  164,  173,   86,
       87,   88,  177,  443,  174,  443,  443,   86,   87,   88,
       86,   87,   88,   86,   87,   88,   86,   87,   88,  443,
      178,  443,  181,  176,  182,  179,  173,   86,   87,   88,
      177,  183,  174,  184,  443,  180,  443,  443,   86,   87,

       88,  186,  443,   86,   87,   88,   86,   87,   88,  178,
      181,  187,  182,  185,  179,  188,   86,   87,   88,  183,
      189,  184,  443,  180,  190,   86,   87,   88,  443,  186,
       86,   87,   88,   86,   87,   88,  443,   86,   87,   88,
      187,  185,  209,  188,  443,  443,   86,   87,   88,  189,
       86,   87,   88,  190,   86,   87,   88,  191,  193,  194,
      443,  443,  192,   86,   87,   88,  218,  443,  195,  197,
      209,  196,   86,   87,   88,  443,  199,   86,   87,   88,
      198,   86,   87,   88,  200,  202,  191,  193,  194,  201,
      192,  208,  443,  443,  218,  203,  195,  197,  204,  196,

       86,   87,   88,  443,  199,   86,   87,   88,  198,   86,
       87,   88,  200,  202,   86,   87,   88,  443,  201,  443,
      208,   86,   87,   88,  203,  205,  204,  443,  443,   86,
       87,   88,  206,  207,   86,   87,   88,  210,  443,   86,
       87,   88,  443,  443,   86,   87,   88,   86,   87,   88,
      215,   86,   87,   88,  205,  211,  143,  143,   86,   87,
       88,  206,  207,   86,   87,   88,  210,  214,   70,   86,
       87,   88,  443,  216,  222,  443,  443,  223,  443,  215,
       86,   87,   88,  211,  257,  443,   86,   87,   88,   86,
       87,   88,   86,   87,   88,  214,  443,   70,   86,   87,

       88,  216,  219,  222,  220,  223,   86,   87,   88,  227,
      226,  443,  224,  257,  234,   86,   87,   88,  443,  221,
      443,  443,   86,   87,   88,  225,  230,  443,   86,   87,
       88,  219,  231,  220,   86,   87,   88,  227,  443,  226,
      228,  224,  443,  234,  229,  443,  232,  221,   86,   87,
       88,  443,  233,  225,  235,  230,   86,   87,   88,  443,
      443,  231,  236,   86,   87,   88,   86,   87,   88,  228,
       86,   87,   88,  229,  232,  237,  443,  443,   86,   87,
       88,  233,  235,   86,   87,   88,   86,   87,   88,  238,
      236,  239,   86,   87,   88,  240,   86,   87,   88,  443,

      241,  443,  242,  237,   86,   87,   88,   86,   87,   88,
      243,  249,  443,   86,   87,   88,  443,  238,  443,  239,
      443,  244,  443,  443,  240,  246,   86,   87,   88,  241,
      242,  245,  248,   86,   87,   88,   86,   87,   88,  243,
      249,   86,   87,   88,   86,   87,   88,   86,   87,   88,
      244,  443,  247,  250,  246,   86,   87,   88,  443,  245,
      443,  248,   86,   87,   88,   86,   87,   88,   86,   87,
       88,  251,  252,   86,   87,   88,  254,   86,   87,   88,
      247,  250,  253,  443,   86,   87,   88,  256,   86,   87,
       88,   86,   87,   88,  255,  258,   86,   87,   88,  251,

      252,   86,   87,   88,  259,  254,  260,  261,  443,  443,
      253,   86,   87,   88,  262,  256,   86,   87,   88,   86,
       87,   88,  255,  443,  258,   86,   87,   88,  443,  443,
       86,   87,   88,  259,  260,  261,  265,  443,   86,   87,
       88,  443,  262,  267,   86,   87,   88,   86,   87,   88,
      266,   86,   87,   88,  263,  443,   86,   87,   88,   86,
       87,   88,  443,  268,  264,  265,  273,  443,  443,  269,
      272,  267,  270,   86,   87,   88,  443,  271,  266,   86,
       87,   88,  443,  263,   86,   87,   88,  443,   86,   87,
       88,  268,  264,  443,  273,   86,   87,   88,  269,  272,

      270,  274,   86,   87,   88,  271,   86,   87,   88,   86,
       87,   88,  443,  280,   86,   87,   88,   86,   87,   88,
      275,   86,   87,   88,  276,  277,   86,   87,   88,  274,
      279,  281,  282,  283,   86,   87,   88,  443,   86,   87,
       88,  280,  285,   86,   87,   88,  443,  443,  275,  284,
      443,  443,  276,  443,  277,   86,   87,   88,  279,  286,
      281,  282,  283,   86,   87,   88,  443,   86,   87,   88,
      443,  285,  443,  287,   86,   87,   88,  284,  289,   86,
       87,   88,  443,  443,   86,   87,   88,  286,  288,   86,
       87,   88,  443,  443,  291,   86,   87,   88,   86,   87,

       88,  287,  443,  443,   86,   87,   88,  289,  290,  293,
       86,   87,   88,  292,  443,  443,  288,  443,  443,  294,
      296,  443,  291,  443,  297,   86,   87,   88,  295,  443,
       86,   87,   88,   86,   87,   88,  290,  443,  293,  443,
      298,  292,  299,  443,   86,   87,   88,  294,  443,  296,
       86,   87,   88,  297,  443,  443,  295,   86,   87,   88,
       86,   87,   88,  443,  301,   86,   87,   88,  298,  300,
      302,  299,   86,   87,   88,  443,   86,   87,   88,   86,
       87,   88,   86,   87,   88,  303,  443,  304,  443,  443,
       86,   87,   88,  301,  305,  306,  443,  300,  302,  443,

      309,  308,  443,   86,   87,   88,  443,  310,   86,   87,
       88,   86,   87,   88,  303,  304,  443,   86,   87,   88,
      307,  443,  305,  443,  306,  443,   86,   87,   88,  309,
      308,  311,  443,   86,   87,   88,  310,  312,  315,   86,
       87,   88,  443,  314,   86,   87,   88,  313,  307,   86,
       87,   88,   86,   87,   88,  443,   86,   87,   88,  443,
      311,  443,  443,   86,   87,   88,  312,  315,  443,  316,
      317,  314,  321,  443,  319,  313,   86,   87,   88,   86,
       87,   88,  318,   86,   87,   88,   86,   87,   88,   86,
       87,   88,  320,  443,   86,   87,   88,  316,  443,  317,

      321,  443,  325,  319,  322,   86,   87,   88,   86,   87,
       88,  318,  443,  443,   86,   87,   88,  443,  443,  323,
      329,  320,  324,  443,  443,   86,   87,   88,   86,   87,
       88,  325,  322,  443,  326,   86,   87,   88,  327,  443,
       86,   87,   88,  443,   86,   87,   88,  323,  329,  443,
      324,  328,   86,   87,   88,   86,   87,   88,  330,   86,
       87,   88,  326,   86,   87,   88,  443,  327,  331,  443,
       86,   87,   88,  443,  443,  332,   86,   87,   88,  328,
      333,  443,  336,  334,  443,  335,  330,  340,  443,  443,
       86,   87,   88,   86,   87,   88,  443,  331,  443,  337,

      443,   86,   87,   88,  332,   86,   87,   88,  333,  338,
      339,  336,  334,  335,  443,  443,  340,   86,   87,   88,
       86,   87,   88,  342,   86,   87,   88,  337,   86,   87,
       88,   86,   87,   88,   86,   87,   88,  338,  339,   86,
       87,   88,   86,   87,   88,  341,  343,  443,  443,   86,
       87,   88,  342,  344,   86,   87,   88,  443,  346,   86,
       87,   88,  443,  345,  443,  443,  347,  348,   86,   87,
       88,  349,  443,  341,  343,   86,   87,   88,  351,  443,
      443,  344,  354,  443,   86,   87,   88,  346,   86,   87,
       88,  345,   86,   87,   88,  347,  348,   86,   87,   88,

      349,  443,  350,  352,  443,  353,  351,  443,   86,   87,
       88,  354,   86,   87,   88,   86,   87,   88,   86,   87,
       88,  443,  356,   86,   87,   88,  355,   86,   87,   88,
      350,  352,  358,  353,  359,   86,   87,   88,  443,   86,
       87,   88,   86,   87,   88,   86,   87,   88,   86,   87,
       88,  356,  357,  361,  355,  443,  360,   86,   87,   88,
      443,  358,  443,  359,  443,   86,   87,   88,   86,   87,
       88,  366,  364,  443,   86,   87,   88,  362,  363,  365,
      357,  361,   86,   87,   88,  360,   86,   87,   88,  443,
       86,   87,   88,   86,   87,   88,   86,   87,   88,  443,

      366,  364,   86,   87,   88,  362,  363,  367,  365,   86,
       87,   88,   86,   87,   88,  443,   86,   87,   88,  368,
      443,   86,   87,   88,   86,   87,   88,   86,   87,   88,
      370,   86,   87,   88,  369,  367,  371,  372,  373,   86,
       87,   88,  443,   86,   87,   88,  443,  376,  368,  443,
      443,  377,   86,   87,   88,   86,   87,   88,  378,  370,
      443,  443,  369,  443,  443,  371,  372,  373,  443,  374,
      443,  443,  375,   86,   87,   88,  376,   86,   87,   88,
      377,  443,   86,   87,   88,  443,  443,  378,   86,   87,
       88,   86,   87,   88,   86,   87,   88,  374,  379,  381,

      375,  443,  443,   86,   87,   88,   86,   87,   88,   86,
       87,   88,   86,   87,   88,   86,   87,   88,   86,   87,
       88,  380,   86,   87,   88,  382,  386,  379,  381,   86,
       87,   88,   86,   87,   88,  383,  443,  443,  384,  443,
      387,   86,   87,   88,  385,  388,   86,   87,   88,  380,
      389,  443,  443,  382,  386,   86,   87,   88,   86,   87,
       88,  390,  391,  383,   86,   87,   88,  384,  387,  443,
       86,   87,   88,  385,  388,   86,   87,   88,  392,  389,
       86,   87,   88,   86,   87,   88,   86,   87,   88,  443,
      390,  391,   86,   87,   88,  393,  395,   86,   87,   88,

       86,   87,   88,  443,   86,   87,   88,  392,   86,   87,
       88,  394,   86,   87,   88,   86,   87,   88,   86,   87,
       88,  443,  398,  393,  395,   86,   87,   88,   86,   87,
       88,   86,   87,   88,  396,   86,   87,   88,  397,  394,
       86,   87,   88,   86,   87,   88,  399,  443,   86,   87,
       88,   86,   87,   88,  400,  443,  401,   86,   87,   88,
      443,  402,  396,   86,   87,   88,  443,  397,  404,  443,
      411,   86,   87,   88,  443,  399,   86,   87,   88,   86,
       87,   88,  403,  400,  401,  443,   86,   87,   88,  402,
      405,  443,  443,   86,   87,   88,  404,  406,  407,  411,

      408,   86,   87,   88,   86,   87,   88,   86,   87,   88,
      403,  443,  443,   86,   87,   88,  409,  410,  405,   86,
       87,   88,   86,   87,   88,  406,  412,  407,  408,   86,
       87,   88,   86,   87,   88,  443,  443,   86,   87,   88,
       86,   87,   88,  413,  409,  410,   86,   87,   88,   86,
       87,   88,   86,   87,   88,  412,   86,   87,   88,  443,
      414,  443,   86,   87,   88,  416,   86,   87,   88,  417,
      418,  413,   86,   87,   88,  419,  415,  421,   86,   87,
       88,   86,   87,   88,  443,  443,   86,   87,   88,  414,
      420,  443,  443,  416,  443,  443,  422,  443,  417,  418,

       86,   87,   88,  419,  415,  443,  421,   86,   87,   88,
       86,   87,   88,   86,   87,   88,  424,  443,  420,   86,
       87,   88,   86,   87,   88,  422,  423,   86,   87,   88,
      443,  443,  427,   86,   87,   88,  425,  426,   86,   87,
       88,  443,  443,  428,  429,  424,  443,  443,   86,   87,
       88,   86,   87,   88,  423,   86,   87,   88,   86,   87,
       88,  427,  443,  443,  425,  426,   86,   87,   88,   86,
       87,   88,  428,  429,   86,   87,   88,   86,   87,   88,
       86,   87,   88,  430,   86,   87,   88,  431,   86,   87,
       88,   86,   87,   88,  443,  435,   86,   87,   88,   86,

       87,   88,   86,   87,   88,  432,  433,   86,   87,   88,
      434,  430,   86,   87,   88,  443,  431,  436,   86,   87,
       88,   86,   87,   88,  435,   86,   87,   88,  437,  443,
      440,  443,  441,  432,  433,  438,  443,  443,  434,   86,
       87,   88,   86,   87,   88,  443,  436,   86,   87,   88,
       86,   87,   88,   86,   87,   88,  437,  439,  443,  440,
      441,  442,  443,  438,  443,   86,   87,   88,  443,   86,
       87,   88,  443,   86,   87,   88,   86,   87,   88,   86,
       87,   88,  443,  443,  443,  439,   86,   87,   88,  442,
      443,  443,  443,  443,   86,   87,   88,  443,  443,  443,

      443,  443,   86,   87,   88,   61,  443,   61,   61,   61,
       61,   63,  443,   63,   63,   63,   63,   72,   72,   80,
       80,   80,   80,  135,  443,  135,  135,  135,  135,  137,
      443,  137,  137,  137,  137,  146,  146,  212,  212,    3,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443
    } ;

static const flex_int16_t yy_chk[2325] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    6,    7,    7,   19,   19,
       21,   30,   21,   21,   22,  217,   22,   22,   25,   25,

       25,   27,   27,   32,   21,   34,  213,   32,   22,   36,
       36,   36,  212,   34,   59,   59,   79,   79,  154,   34,
       30,   35,   70,   21,   70,   38,  153,   70,   70,   80,
       80,   80,   32,   21,   34,  142,   32,   22,  105,  105,
      105,  141,   34,   30,   30,   30,   39,   34,  138,   35,
      137,   21,   29,   29,   38,   32,   32,   32,   33,  135,
       33,   34,   34,   34,   29,   33,   35,   35,   35,   29,
       33,   29,   88,   48,   87,   39,   50,   38,   38,   38,
       86,   29,   29,   64,   40,  100,   33,   44,   33,  144,
      144,   44,   29,   33,   39,   39,   39,   29,   33,   29,

       63,   44,   48,   33,   33,   33,   62,   29,   29,   29,
       31,  145,  145,   40,  100,   61,   44,   31,   58,   41,
       44,   48,   48,   48,   31,   41,   57,   31,   42,   44,
       31,   56,   42,  100,  100,  100,   42,   81,   55,   31,
       40,   40,   40,   44,   44,   44,   31,   41,   53,   50,
       50,   50,   31,   41,   45,   31,   42,   43,   31,   52,
       42,   41,   41,   41,   42,   81,   31,   31,   31,   37,
       37,   42,   42,   42,   43,   51,   37,   37,   28,   81,
       81,   81,   37,   45,  147,  147,   43,   26,   20,   66,
       66,   68,   68,   18,   12,   47,   82,   47,   37,   37,

       47,   66,   43,   68,   37,   37,   45,   45,   45,  104,
       37,    9,   46,   43,   43,   43,   46,    8,    5,   46,
       37,   37,   37,   47,   82,   47,   49,   49,   47,   46,
       66,   83,   68,   82,   82,   82,   84,  104,   47,   47,
       47,   46,    3,   85,   69,   46,   69,   69,   46,   91,
        0,  104,  104,  104,    0,   49,   49,   46,   69,   93,
       83,   89,  115,  115,  115,   84,   90,    0,   46,   46,
       46,   85,  116,  116,  116,   49,   49,   49,   91,   94,
       85,   85,   85,    0,   83,   83,   83,   69,   93,   89,
       84,   84,   84,   92,   90,   92,   96,   99,   89,   89,

       89,   91,   91,   91,   90,   90,   90,   94,    0,   97,
        0,   93,   93,   93,  102,    0,   95,   98,   94,   94,
       94,   92,   95,   92,   96,  101,   99,    0,  101,   95,
      140,  140,  140,    0,   96,   96,   96,   97,   92,   92,
       92,    0,  102,    0,    0,   95,   98,   97,   97,   97,
       95,   99,   99,   99,  101,  106,  101,   95,  103,  102,
      102,  102,  107,    0,  103,    0,    0,   95,   95,   95,
       98,   98,   98,  101,  101,  101,  150,  150,  150,    0,
      108,    0,  109,  106,  110,  108,  103,  151,  151,  151,
      107,  111,  103,  112,    0,  108,    0,    0,  106,  106,

      106,  114,    0,  103,  103,  103,  107,  107,  107,  108,
      109,  117,  110,  113,  108,  118,  110,  110,  110,  111,
      119,  112,    0,  108,  119,  109,  109,  109,    0,  114,
      112,  112,  112,  108,  108,  108,    0,  111,  111,  111,
      117,  113,  131,  118,    0,    0,  114,  114,  114,  119,
      113,  113,  113,  119,  118,  118,  118,  120,  121,  121,
        0,    0,  120,  117,  117,  117,  155,    0,  121,  122,
      131,  121,  119,  119,  119,    0,  123,  167,  167,  167,
      122,  131,  131,  131,  123,  125,  120,  121,  121,  124,
      120,  130,    0,    0,  155,  126,  121,  122,  127,  121,

      155,  155,  155,    0,  123,  120,  120,  120,  122,  121,
      121,  121,  123,  125,  122,  122,  122,    0,  124,    0,
      130,  123,  123,  123,  126,  128,  127,    0,    0,  125,
      125,  125,  128,  129,  127,  127,  127,  132,    0,  130,
      130,  130,    0,    0,  124,  124,  124,  126,  126,  126,
      149,  182,  182,  182,  128,  133,  143,  143,  200,  200,
      200,  128,  129,  220,  220,  220,  132,  148,  143,  221,
      221,  221,    0,  152,  157,    0,    0,  158,    0,  149,
      128,  128,  128,  133,  192,    0,  129,  129,  129,  132,
      132,  132,  133,  133,  133,  148,    0,  143,  149,  149,

      149,  152,  156,  157,  156,  158,  148,  148,  148,  161,
      160,    0,  159,  192,  168,  152,  152,  152,    0,  156,
        0,    0,  158,  158,  158,  159,  163,    0,  157,  157,
      157,  156,  164,  156,  192,  192,  192,  161,    0,  160,
      162,  159,    0,  168,  162,    0,  165,  156,  161,  161,
      161,    0,  166,  159,  169,  163,  156,  156,  156,    0,
        0,  164,  170,  159,  159,  159,  160,  160,  160,  162,
      168,  168,  168,  162,  165,  171,    0,    0,  163,  163,
      163,  166,  169,  165,  165,  165,  164,  164,  164,  172,
      170,  173,  169,  169,  169,  174,  162,  162,  162,    0,

      175,    0,  176,  171,  166,  166,  166,  170,  170,  170,
      177,  184,    0,  171,  171,  171,    0,  172,    0,  173,
        0,  178,    0,    0,  174,  180,  172,  172,  172,  175,
      176,  179,  183,  231,  231,  231,  173,  173,  173,  177,
      184,  233,  233,  233,  176,  176,  176,  174,  174,  174,
      178,    0,  181,  185,  180,  175,  175,  175,    0,  179,
        0,  183,  177,  177,  177,  184,  184,  184,  179,  179,
      179,  186,  187,  178,  178,  178,  189,  180,  180,  180,
      181,  185,  188,    0,  183,  183,  183,  191,  181,  181,
      181,  236,  236,  236,  190,  193,  185,  185,  185,  186,

      187,  241,  241,  241,  194,  189,  195,  196,    0,    0,
      188,  187,  187,  187,  197,  191,  186,  186,  186,  188,
      188,  188,  190,    0,  193,  191,  191,  191,    0,    0,
      189,  189,  189,  194,  195,  196,  199,    0,  190,  190,
      190,    0,  197,  202,  196,  196,  196,  193,  193,  193,
      201,  195,  195,  195,  198,    0,  194,  194,  194,  197,
      197,  197,    0,  203,  198,  199,  208,    0,    0,  204,
      207,  202,  205,  248,  248,  248,    0,  206,  201,  251,
      251,  251,    0,  198,  202,  202,  202,    0,  199,  199,
      199,  203,  198,    0,  208,  201,  201,  201,  204,  207,

      205,  209,  198,  198,  198,  206,  203,  203,  203,  208,
      208,  208,    0,  215,  205,  205,  205,  206,  206,  206,
      210,  204,  204,  204,  210,  211,  207,  207,  207,  209,
      214,  216,  218,  219,  252,  252,  252,    0,  209,  209,
      209,  215,  223,  264,  264,  264,    0,    0,  210,  222,
        0,    0,  210,    0,  211,  215,  215,  215,  214,  224,
      216,  218,  219,  210,  210,  210,    0,  214,  214,  214,
        0,  223,    0,  225,  211,  211,  211,  222,  227,  216,
      216,  216,    0,    0,  218,  218,  218,  224,  226,  219,
      219,  219,    0,    0,  229,  222,  222,  222,  223,  223,

      223,  225,    0,    0,  224,  224,  224,  227,  228,  232,
      225,  225,  225,  230,    0,    0,  226,    0,    0,  234,
      237,    0,  229,    0,  238,  226,  226,  226,  235,    0,
      227,  227,  227,  229,  229,  229,  228,    0,  232,    0,
      239,  230,  240,    0,  228,  228,  228,  234,    0,  237,
      230,  230,  230,  238,    0,    0,  235,  232,  232,  232,
      234,  234,  234,    0,  243,  235,  235,  235,  239,  242,
      244,  240,  237,  237,  237,    0,  238,  238,  238,  268,
      268,  268,  239,  239,  239,  245,    0,  246,    0,    0,
      240,  240,  240,  243,  247,  249,    0,  242,  244,    0,

      254,  253,    0,  244,  244,  244,    0,  255,  242,  242,
      242,  269,  269,  269,  245,  246,    0,  243,  243,  243,
      250,    0,  247,    0,  249,    0,  246,  246,  246,  254,
      253,  256,    0,  245,  245,  245,  255,  257,  260,  247,
      247,  247,    0,  259,  249,  249,  249,  258,  250,  253,
      253,  253,  254,  254,  254,    0,  250,  250,  250,    0,
      256,    0,    0,  255,  255,  255,  257,  260,    0,  261,
      262,  259,  267,    0,  265,  258,  259,  259,  259,  275,
      275,  275,  263,  256,  256,  256,  258,  258,  258,  257,
      257,  257,  266,    0,  260,  260,  260,  261,    0,  262,

      267,    0,  273,  265,  270,  279,  279,  279,  261,  261,
      261,  263,    0,    0,  267,  267,  267,    0,    0,  271,
      280,  266,  272,    0,    0,  262,  262,  262,  265,  265,
      265,  273,  270,    0,  274,  263,  263,  263,  276,    0,
      270,  270,  270,    0,  266,  266,  266,  271,  280,    0,
      272,  277,  273,  273,  273,  271,  271,  271,  281,  272,
      272,  272,  274,  280,  280,  280,    0,  276,  282,    0,
      274,  274,  274,    0,    0,  283,  284,  284,  284,  277,
      285,    0,  288,  286,    0,  287,  281,  292,    0,    0,
      276,  276,  276,  277,  277,  277,    0,  282,    0,  289,

        0,  281,  281,  281,  283,  296,  296,  296,  285,  290,
      291,  288,  286,  287,    0,    0,  292,  285,  285,  285,
      282,  282,  282,  294,  287,  287,  287,  289,  283,  283,
      283,  286,  286,  286,  288,  288,  288,  290,  291,  292,
      292,  292,  289,  289,  289,  293,  295,    0,    0,  291,
      291,  291,  294,  297,  290,  290,  290,    0,  299,  302,
      302,  302,    0,  298,    0,    0,  300,  301,  306,  306,
      306,  303,    0,  293,  295,  294,  294,  294,  305,    0,
        0,  297,  309,    0,  295,  295,  295,  299,  293,  293,
      293,  298,  297,  297,  297,  300,  301,  298,  298,  298,

      303,    0,  304,  307,    0,  308,  305,    0,  299,  299,
      299,  309,  311,  311,  311,  301,  301,  301,  300,  300,
      300,    0,  313,  305,  305,  305,  310,  303,  303,  303,
      304,  307,  315,  308,  316,  309,  309,  309,    0,  304,
      304,  304,  308,  308,  308,  312,  312,  312,  307,  307,
      307,  313,  314,  319,  310,    0,  317,  318,  318,  318,
        0,  315,    0,  316,    0,  310,  310,  310,  320,  320,
      320,  326,  323,    0,  313,  313,  313,  321,  322,  324,
      314,  319,  316,  316,  316,  317,  315,  315,  315,    0,
      319,  319,  319,  314,  314,  314,  325,  325,  325,    0,

      326,  323,  327,  327,  327,  321,  322,  328,  324,  329,
      329,  329,  317,  317,  317,    0,  321,  321,  321,  330,
        0,  322,  322,  322,  323,  323,  323,  326,  326,  326,
      332,  324,  324,  324,  331,  328,  333,  334,  335,  336,
      336,  336,    0,  328,  328,  328,    0,  339,  330,    0,
        0,  339,  340,  340,  340,  342,  342,  342,  341,  332,
        0,    0,  331,    0,    0,  333,  334,  335,    0,  337,
        0,    0,  338,  330,  330,  330,  339,  331,  331,  331,
      339,    0,  332,  332,  332,    0,    0,  341,  333,  333,
      333,  334,  334,  334,  335,  335,  335,  337,  345,  348,

      338,    0,    0,  339,  339,  339,  337,  337,  337,  338,
      338,  338,  341,  341,  341,  343,  343,  343,  344,  344,
      344,  346,  347,  347,  347,  349,  355,  345,  348,  350,
      350,  350,  351,  351,  351,  352,    0,    0,  353,    0,
      356,  357,  357,  357,  354,  358,  345,  345,  345,  346,
      359,    0,    0,  349,  355,  348,  348,  348,  355,  355,
      355,  360,  362,  352,  346,  346,  346,  353,  356,    0,
      349,  349,  349,  354,  358,  361,  361,  361,  363,  359,
      352,  352,  352,  356,  356,  356,  353,  353,  353,    0,
      360,  362,  354,  354,  354,  366,  368,  358,  358,  358,

      364,  364,  364,    0,  359,  359,  359,  363,  365,  365,
      365,  367,  369,  369,  369,  360,  360,  360,  362,  362,
      362,    0,  374,  366,  368,  370,  370,  370,  371,  371,
      371,  363,  363,  363,  372,  368,  368,  368,  373,  367,
      366,  366,  366,  375,  375,  375,  376,    0,  367,  367,
      367,  374,  374,  374,  377,    0,  378,  380,  380,  380,
        0,  379,  372,  383,  383,  383,    0,  373,  382,    0,
      392,  372,  372,  372,    0,  376,  386,  386,  386,  388,
      388,  388,  381,  377,  378,    0,  373,  373,  373,  379,
      384,    0,    0,  378,  378,  378,  382,  385,  387,  392,

      389,  376,  376,  376,  379,  379,  379,  377,  377,  377,
      381,    0,    0,  382,  382,  382,  390,  391,  384,  381,
      381,  381,  392,  392,  392,  385,  395,  387,  389,  393,
      393,  393,  384,  384,  384,    0,    0,  389,  389,  389,
      385,  385,  385,  397,  390,  391,  394,  394,  394,  396,
      396,  396,  387,  387,  387,  395,  391,  391,  391,    0,
      398,    0,  390,  390,  390,  399,  400,  400,  400,  402,
      403,  397,  401,  401,  401,  404,  398,  406,  395,  395,
      395,  408,  408,  408,    0,    0,  397,  397,  397,  398,
      405,    0,    0,  399,    0,    0,  407,    0,  402,  403,

      409,  409,  409,  404,  398,    0,  406,  404,  404,  404,
      399,  399,  399,  398,  398,  398,  411,    0,  405,  402,
      402,  402,  403,  403,  403,  407,  410,  406,  406,  406,
        0,    0,  414,  405,  405,  405,  412,  413,  417,  417,
      417,    0,    0,  415,  416,  411,    0,    0,  407,  407,
      407,  418,  418,  418,  410,  419,  419,  419,  410,  410,
      410,  414,    0,    0,  412,  413,  420,  420,  420,  411,
      411,  411,  415,  416,  413,  413,  413,  421,  421,  421,
      412,  412,  412,  422,  423,  423,  423,  425,  414,  414,
      414,  415,  415,  415,    0,  432,  416,  416,  416,  424,

      424,  424,  426,  426,  426,  427,  428,  429,  429,  429,
      431,  422,  430,  430,  430,    0,  425,  433,  435,  435,
      435,  422,  422,  422,  432,  437,  437,  437,  434,    0,
      439,    0,  440,  427,  428,  436,    0,    0,  431,  425,
      425,  425,  427,  427,  427,    0,  433,  432,  432,  432,
      428,  428,  428,  431,  431,  431,  434,  438,    0,  439,
      440,  441,    0,  436,    0,  434,  434,  434,    0,  433,
      433,  433,    0,  436,  436,  436,  440,  440,  440,  442,
      442,  442,    0,    0,    0,  438,  439,  439,  439,  441,
        0,    0,    0,    0,  438,  438,  438,    0,    0,    0,

        0,    0,  441,  441,  441,  444,    0,  444,  444,  444,
      444,  445,    0,  445,  445,  445,  445,  446,  446,  447,
      447,  447,  447,  448,    0,  448,  448,  448,  448,  449,
        0,  449,  449,  449,  449,  450,  450,  451,  451,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443
    } ;

static const flex_int16_t yy_rule_linenum[119] =
    {   0,
       78,   79,   81,   87,  108,  109,  110,  111,  112,  113,
      114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
      184,  185,  186,  187,  189,  190,  191,  192,  193,  194,
      195,  196,  197,  199,  200,  201,  202,  203,  204,  205,

      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  224
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlite3_lexer.ll"
#line 2 "sqlite3_lexer.ll"
#include <string>
#include "ParserDriver.h"
#include "sqlite3_parser.hpp"
#line 1188 "sqlite3_lexer.cpp"
#define YY_NO_UNISTD_H 1
#line 12 "sqlite3_lexer.ll"
	#define TOKEN(n) sqlb::parser::parser::symbol_type(sqlb::parser::parser::token::TOK_##n, yytext, loc)

	std::string unquote_string(std::string s, char quote_char)
	{
		if(s.size() < 2)
			return s;

		if(quote_char == '[')
		{
			if(s.front() == '[' && s.back() == ']')
				s = s.substr(1, s.size()-2);
		} else {
			if(s.front() == quote_char && s.back() == quote_char)
			{
				s = s.substr(1, s.size()-2);
				auto pos = s.npos;
				while((pos = s.find(std::string(2, quote_char))) != s.npos)
					s = s.replace(pos, 2, std::string(1, quote_char));
			}
		}

		return s;
	}
#line 1214 "sqlite3_lexer.cpp"
#line 55 "sqlite3_lexer.ll"
	/* TODO Add $ bind parameters */
	// Code run each time a pattern is matched.
	#define YY_USER_ACTION loc.columns(yyleng);
#line 1219 "sqlite3_lexer.cpp"
#line 1220 "sqlite3_lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 67 "sqlite3_lexer.ll"



#line 71 "sqlite3_lexer.ll"
	// Shortcut to the location held by the driver
	sqlb::parser::location& loc = drv.location;

	// Code run each time yylex is called.
	loc.step();


#line 1557 "sqlite3_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 444 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 443 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 119 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 119 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 120 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 78 "sqlite3_lexer.ll"
loc.step();
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 79 "sqlite3_lexer.ll"
loc.lines(yyleng); loc.step();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "sqlite3_lexer.ll"
{
			int c;
			while((c = yyinput(yyscanner)) != '\n' && c != EOF)
				;    /* eat up text of comment */
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 87 "sqlite3_lexer.ll"
{
			int c;

			for(;;)
			{
				while((c = yyinput(yyscanner)) != '*' && c != EOF)
					;    /* eat up text of comment */

				if(c == '*')
				{
					while((c = yyinput(yyscanner)) == '*')
						;
					if(c == '/')
						break;    /* found the end */
				}

				if(c == EOF)
					throw sqlb::parser::parser::syntax_error(loc, "EOF in comment");
			}
		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 108 "sqlite3_lexer.ll"
return TOKEN(ABORT);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 109 "sqlite3_lexer.ll"
return TOKEN(ACTION);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 110 "sqlite3_lexer.ll"
return TOKEN(AND);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 111 "sqlite3_lexer.ll"
return TOKEN(AS);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "sqlite3_lexer.ll"
return TOKEN(ASC);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "sqlite3_lexer.ll"
return TOKEN(AUTOINCREMENT);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 114 "sqlite3_lexer.ll"
return TOKEN(BETWEEN);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 115 "sqlite3_lexer.ll"
return TOKEN(CASCADE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 116 "sqlite3_lexer.ll"
return TOKEN(CASE);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "sqlite3_lexer.ll"
return TOKEN(CAST);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "sqlite3_lexer.ll"
return TOKEN(CHECK);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "sqlite3_lexer.ll"
return TOKEN(COLLATE);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 120 "sqlite3_lexer.ll"
return TOKEN(CONFLICT);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 121 "sqlite3_lexer.ll"
return TOKEN(CONSTRAINT);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 122 "sqlite3_lexer.ll"
return TOKEN(CREATE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 123 "sqlite3_lexer.ll"
return TOKEN(CURRENT_DATE);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 124 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIME);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 125 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIMESTAMP);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 126 "sqlite3_lexer.ll"
return TOKEN(DEFAULT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 127 "sqlite3_lexer.ll"
return TOKEN(DEFERRABLE);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 128 "sqlite3_lexer.ll"
return TOKEN(DEFERRED);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "sqlite3_lexer.ll"
return TOKEN(DELETE);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "sqlite3_lexer.ll"
return TOKEN(DESC);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "sqlite3_lexer.ll"
return TOKEN(DISTINCT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "sqlite3_lexer.ll"
return TOKEN(ELSE);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "sqlite3_lexer.ll"
return TOKEN(END);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 134 "sqlite3_lexer.ll"
return TOKEN(ESCAPE);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "sqlite3_lexer.ll"
return TOKEN(EXISTS);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "sqlite3_lexer.ll"
return TOKEN(FAIL);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "sqlite3_lexer.ll"
return TOKEN(FALSE);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 138 "sqlite3_lexer.ll"
return TOKEN(FILTER);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 139 "sqlite3_lexer.ll"
return TOKEN(FOLLOWING);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 140 "sqlite3_lexer.ll"
return TOKEN(FOREIGN);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 141 "sqlite3_lexer.ll"
return TOKEN(GLOB);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 142 "sqlite3_lexer.ll"
return TOKEN(IF);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 143 "sqlite3_lexer.ll"
return TOKEN(IGNORE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 144 "sqlite3_lexer.ll"
return TOKEN(IMMEDIATE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 145 "sqlite3_lexer.ll"
return TOKEN(IN);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 146 "sqlite3_lexer.ll"
return TOKEN(INDEX);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 147 "sqlite3_lexer.ll"
return TOKEN(INITIALLY);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 148 "sqlite3_lexer.ll"
return TOKEN(INSERT);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 149 "sqlite3_lexer.ll"
return TOKEN(IS);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "sqlite3_lexer.ll"
return TOKEN(ISNULL);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "sqlite3_lexer.ll"
return TOKEN(KEY);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "sqlite3_lexer.ll"
return TOKEN(LIKE);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "sqlite3_lexer.ll"
return TOKEN(MATCH);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 154 "sqlite3_lexer.ll"
return TOKEN(NO);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 155 "sqlite3_lexer.ll"
return TOKEN(NOT);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 156 "sqlite3_lexer.ll"
return TOKEN(NOTNULL);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 157 "sqlite3_lexer.ll"
return TOKEN(NULL);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 158 "sqlite3_lexer.ll"
return TOKEN(ON);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 159 "sqlite3_lexer.ll"
return TOKEN(OR);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 160 "sqlite3_lexer.ll"
return TOKEN(OVER);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 161 "sqlite3_lexer.ll"
return TOKEN(PARTITION);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "sqlite3_lexer.ll"
return TOKEN(PRECEDING);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "sqlite3_lexer.ll"
return TOKEN(PRIMARY);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "sqlite3_lexer.ll"
return TOKEN(RAISE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 165 "sqlite3_lexer.ll"
return TOKEN(RANGE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 166 "sqlite3_lexer.ll"
return TOKEN(REFERENCES);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 167 "sqlite3_lexer.ll"
return TOKEN(REGEXP);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 168 "sqlite3_lexer.ll"
return TOKEN(REPLACE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 169 "sqlite3_lexer.ll"
return TOKEN(RESTRICT);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 170 "sqlite3_lexer.ll"
return TOKEN(ROLLBACK);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 171 "sqlite3_lexer.ll"
return TOKEN(ROWID);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 172 "sqlite3_lexer.ll"
return TOKEN(ROWS);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 173 "sqlite3_lexer.ll"
return TOKEN(SELECT);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 174 "sqlite3_lexer.ll"
return TOKEN(SET);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 175 "sqlite3_lexer.ll"
return TOKEN(TABLE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 176 "sqlite3_lexer.ll"
return TOKEN(TEMP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 177 "sqlite3_lexer.ll"
return TOKEN(TEMPORARY);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 178 "sqlite3_lexer.ll"
return TOKEN(THEN);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 179 "sqlite3_lexer.ll"
return TOKEN(TRUE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 180 "sqlite3_lexer.ll"
return TOKEN(UNBOUNDED);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 181 "sqlite3_lexer.ll"
return TOKEN(UNIQUE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 182 "sqlite3_lexer.ll"
return TOKEN(UPDATE);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 183 "sqlite3_lexer.ll"
return TOKEN(USING);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 184 "sqlite3_lexer.ll"
return TOKEN(VIRTUAL);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 185 "sqlite3_lexer.ll"
return TOKEN(WHEN);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 186 "sqlite3_lexer.ll"
return TOKEN(WHERE);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 187 "sqlite3_lexer.ll"
return TOKEN(WITHOUT);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 189 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(yytext, loc);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 190 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '`'), loc);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '['), loc);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 192 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_QUOTEDLITERAL(unquote_string(yytext, '"'), loc);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STRINGLITERAL(yytext, loc);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 194 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_NUMERIC(yytext, loc);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BLOBLITERAL(yytext, loc);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 196 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 199 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LPAREN(loc);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 200 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_RPAREN(loc);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_DOT(loc);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_COMMA(loc);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 203 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SEMI(loc);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 204 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PLUS(loc);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 205 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_MINUS(loc);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 206 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STAR(loc);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 207 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SLASH(loc);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 208 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_TILDE(loc);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 209 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_AMPERSAND(loc);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 210 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PERCENT(loc);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 211 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITOR(loc);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 212 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_OROP(loc);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 213 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL(loc);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 214 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL2(loc);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 215 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATER(loc);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 216 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATEREQUAL(loc);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 217 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWER(loc);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 218 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWEREQUAL(loc);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 219 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL(loc);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 220 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL2(loc);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISELEFT(loc);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 222 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISERIGHT(loc);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "sqlite3_lexer.ll"
throw sqlb::parser::parser::syntax_error(loc, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 226 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EOF(loc);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 228 "sqlite3_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2256 "sqlite3_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 444 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 444 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 443);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 228 "sqlite3_lexer.ll"


namespace sqlb
{
namespace parser
{

void ParserDriver::begin_scan()
{
	yylex_init(&scanner);
	location.initialize();
	yyset_debug(trace_scanner, scanner);
	buffer = yy_scan_string(source.c_str(), scanner);
}

void ParserDriver::end_scan()
{
	yy_delete_buffer(buffer, scanner);
	yylex_destroy(scanner);
}

}
}

